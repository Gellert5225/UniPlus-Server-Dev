<% include ./partials/header.ejs %>
<div id="mainBody" class="container-fluid">
  <div class="row">
    <div class="col" id="leftCol" >
      <div id="menu">
        
      </div>
    </div>
    <div class="col-8" id="midCol">
      <div id="composeArea" style="padding: 20px;">
        <div>
          <h3>Ask A Question</h3>
          <br>
        </div>
        <div>
          <h6>Title</h6>
          <div id="titleEditor" style="border-radius: 5px;">
          </div>
          <br>
        </div>
        <div>
          <h6>Body</h6>
          <div id="editor" style="height: 500px; border-bottom-left-radius: 5px; border-bottom-right-radius: 5px;">
          </div>
          <br>
        </div>
        <div>
          <h6>Tag</h6>
          <div id="tagEditor" class="tagEditor" style="border-radius: 5px;">
          </div>
        </div>
        <div id="tagPreview" style="margin-top: 10px; margin-bottom: 10px;">
          
        </div>
        <div>
          <button type="submit" class="btn btn-primary" id="postBtn">
            Post Your Question
          </button>
        </div>
      </div>
    </div>
    <div class="col" id="rightCol">
      3 of 3
    </div>
  </div>
</div>

<script>
</script>

<script>
  var toolbarOptions = [
    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
    ['blockquote', 'code-block'],

    [{ 'header': 1 }, { 'header': 2 }],               // custom button values
    [{ 'list': 'ordered'}, { 'list': 'bullet' }],
    [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
    [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent

    [{ 'align': [] }],

    ['image']
  ];

  var icons = Quill.import('ui/icons');
  icons['codeBlock'] = '<img src="../public/assets/images/codeBlock.png">';

  var quill = new Quill('#editor', {
    modules: {
      toolbar: toolbarOptions
    },
    theme: 'snow',
    placeholder: 'Compose your question...'
  });

  var quillTitle = new Quill('#titleEditor', {
    modules: {
      toolbar: null
    },
    theme: 'snow',
    placeholder: 'What\'s your question? Be specific...'
  });

  var tags = [];
  
  var bindings = {
    enter: {
      key: 13,
      handler: function(range, context) {
        tags.push(context.prefix);
        console.log(tags);
        $newEl = $('<div class="tag" style="margin-right: 5px;"><p class="tagText">' + context.prefix + '</p></div>');
        $newEl.on("click", function(){
          $(this).remove();
          tags = tags.filter(item => item !== context.prefix);
          console.log(tags);
        });
        $('#tagPreview').append($newEl);
        this.quill.deleteText(range.index - range.index, range.index);
      }
    }
  };

  var quillTag = new Quill('#tagEditor', {
    modules: {
      toolbar: null,
      keyboard: {
        bindings: bindings
      }
    },
    theme: 'snow',
    placeholder: 'Start typing and press enter to add a tag'
  });

  quillTag.keyboard.addBinding({
    key: ' ',
    handler: function(range, context) {      
    }
  });

  $('#postBtn').click(function(){
    var title = $('#titleEditor').text();
    var body = $('#editor .ql-editor').html();
    $.ajax({
      type: 'post',
      headers: {
          'X-Parse-Application-Id': "Zj9b976AHw3b7SkOgCKzaEjB7bjJoPh2XcyxTcgU",
          "X-Parse-REST-API-Key": "restkey",
          'X-Parse-Master-Key': "T5DQ2mT8LNAp0Enn9Y3ERU0iY93sT06PctF6Dt4g"
      },
      url: "/parse/classes/Questions",
      data: JSON.stringify({"solved": false, 
                            "user": {"__type":"Pointer","className":"_User","objectId":"<%= currentUser.id %>"},
                            "upVotes": 0,
                            "views": 0,
                            "numberOfComments": 0,
                            "bodyRaw": body,
                            "body": body,
                            "title": title,
                            "numberOfFavs": 0,
                            "markedUsers": [],
                            "tagArray": tags}),
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      success: function(result) {
        console.log('Posted a question ' + result.objectId);
        window.location = 'questions/' + result.objectId;
      }, error: function (xhr, status, error) {
        console.log(error);
      }
    });
  });
</script>

<% include ./partials/footer.ejs %>